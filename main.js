!function(){"use strict";class e{constructor(e){let{name:t,link:r,_id:i,isLiked:n}=e,s=arguments.length>1&&void 0!==arguments[1]?arguments[1]:".card",{handleImageClick:o,likeCallback:a,deleteCallback:l}=arguments.length>2?arguments[2]:void 0;this._name=t,this._link=r,this._id=i,this.isLiked=n,this._cardSelector=s,this._handleImageClick=o,this._deleteCallback=l,this._likeCallback=a,this._cardSelectors={name:`${s}__name`,image:`${s}__image`,likeButton:`${s}__like-btn`,deleteButton:`${s}__delete-btn`},this.init()}_likeButtonHandler=e=>{this._likeCallback().then((()=>{this.isLiked=!this.isLiked,this.updateLike()})).catch((e=>console.error(`Error: ${e}`)))};_deleteButtonHandler=e=>{this._deleteCallback()};_setEventListeners=()=>{this._likeButton.addEventListener("click",this._likeButtonHandler),this._deleteButton.addEventListener("click",this._deleteButtonHandler),this._imageElement.addEventListener("click",(()=>{this._handleImageClick(this)}))};init=()=>(this._cardElement=document.querySelector("#card-template").content.querySelector(this._cardSelector).cloneNode(!0),this._likeButton=this._cardElement.querySelector(this._cardSelectors.likeButton),this._deleteButton=this._cardElement.querySelector(this._cardSelectors.deleteButton),this._imageElement=this._cardElement.querySelector(this._cardSelectors.image),this._nameElement=this._cardElement.querySelector(this._cardSelectors.name),this._imageElement.alt=this._name,this._imageElement.src=this._link,this._nameElement.textContent=this._name,this._cardElement.id=this._id,this._setEventListeners(),this._cardElement);delete(){this._cardElement.remove()}updateLike(){this.isLiked?this._likeButton.classList.add("card__like-btn_mode_liked"):this._likeButton.classList.remove("card__like-btn_mode_liked")}getCard=()=>({name:this._name,link:this._link,element:this._cardElement,id:this._id})}const t=new class{constructor(e){let{nameElement:t,jobElement:r,pfpElement:i}=e;this._nameElement=t,this._jobElement=r,this._pfpElement=i}getUserInfo(){return{name:this._nameElement.textContent,job:this._jobElement.textContent,pfpURL:this._pfpElement.src}}setUserInfo(e){let{name:t,job:r,id:i,pfpURL:n}=e;t&&(this._nameElement.textContent=t),r&&(this._jobElement.textContent=r),i&&(this._id=i),n&&(this._pfpElement.src=n)}}({nameElement:document.querySelector(".profile__name"),jobElement:document.querySelector(".profile__job"),pfpElement:document.querySelector(".profile__avatar")});class r{constructor(e){let{popupSelector:t}=e;this._popup=document.querySelector(t),this._popupExitButton=this._popup.querySelector(".popup__exit-btn"),this._isOpened=!1,this._popupContainerClass="popup",this._openedPopupClass="popup_opened"}open(){this._popup.classList.add(this._openedPopupClass),document.addEventListener("keydown",this._handleEscClose),this._isOpened=!0}close(){this._popup.classList.remove(this._openedPopupClass),document.removeEventListener("keydown",this._handleEscClose),this._isOpened=!1}toggle(){this._popup.classList.toggle(this._openedPopupClass),this._isOpened=!this._isOpened}_handleEscClose=e=>{"Escape"==e.key&&this._isOpened&&this.close()};_handleBackdropClose=e=>{e.target.classList.contains(this._popupContainerClass)&&this.close()};setEventListeners(){this._popup.addEventListener("click",this._handleBackdropClose),this._popupExitButton.addEventListener("click",(()=>{this.close()}))}}class i extends r{constructor(e,t){let{popupSelector:r}=e;super({popupSelector:r}),this._submitCallback=t,this._formInputSelector=".form__input",this._formElement=this._popup.querySelector(".form"),this._inputElements=Array.from(this._popup.querySelectorAll(this._formInputSelector)),this._formSubmit=this._formElement.querySelector(".form__submit")}_getInputValues=()=>{const e={};return this._inputElements.forEach((t=>{e[t.id]=t.value})),e};setInputValues(e){this._inputElements.forEach((t=>{t.value=e[t.id]}))}getFormValidator(e){return e[this._formElement.getAttribute("name")]}getForm(){return this._formElement}updateFormSubmit(e){this._formSubmit.textContent=e}setEventListeners=()=>{super.setEventListeners(),this._formElement.addEventListener("submit",(e=>{e.preventDefault(),this._submitCallback(this._getInputValues())}))}}class n{constructor(e,t){this._config=e,this._formElement=t,this._submitButtonElement=t.querySelector(e.submitButtonSelector),this._inputList=t.querySelectorAll(this._config.inputSelector)}_isInputValid=e=>!e.validity.valid;_hasInvalidInput=()=>Array.from(this._inputList).some((e=>this._isInputValid(e)));_showInputError=(e,t)=>{const r=this._formElement.querySelector(this._config.errorInputPrefixSelector+e.id);r.textContent=t,r.classList.add(this._config.errorClass),e.classList.add(this._config.inputErrorClass)};_hideInputError=e=>{this._formElement.querySelector(this._config.errorInputPrefixSelector+e.id).classList.remove(this._config.errorClass),e.classList.remove(this._config.inputErrorClass)};disableSubmitButton(){arguments.length>0&&void 0!==arguments[0]&&!arguments[0]?(this._submitButtonElement.classList.remove(this._config.inactiveButtonClass),this._submitButtonElement.removeAttribute("disabled")):(this._submitButtonElement.classList.add(this._config.inactiveButtonClass),this._submitButtonElement.setAttribute("disabled",""))}reset(){this._formElement.reset()}hideInputErrors(){this._inputList.forEach((e=>this._hideInputError(e)))}getFormElement(){return this._formElement}_toggleButtonState=()=>{const e=this._hasInvalidInput();this.disableSubmitButton(e)};_checkInputValidity=e=>{e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)};_setEventListeners=()=>{this._toggleButtonState(),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))};enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}class s{constructor(e,t){let{items:r,renderer:i}=e;this._renderedItems=r,this._renderer=i,this._container=document.querySelector(t)}addItem(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"prepend";this._container[t](e)}clear(){this._container.innerHTML=""}renderItems(){this._renderedItems.forEach((e=>this._renderer(e)))}}let o;const a=new class{constructor(e){let{baseUrl:t,authToken:r}=e;this._apiURL=t,this._authToken=r}apiCall(e){let{endpoint:t,method:r,body:i={}}=e;const n={method:r,headers:{authorization:this._authToken,"Content-Type":"application/json"}};var s;return s=i,0!==Object.keys(s).length&&(n.body=JSON.stringify(i)),fetch(this._apiURL+t,n).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.statusText}`)))}getUser(){return this.apiCall({endpoint:"/users/me",method:"GET"})}getCards(){return this.apiCall({endpoint:"/cards",method:"GET"})}updateProfile(e){let{name:t,about:r}=e;return this.apiCall({endpoint:"/users/me",method:"PATCH",body:{name:t,about:r}})}updateProfilePicture(e){let{url:t}=e;return this.apiCall({endpoint:"/users/me/avatar",method:"PATCH",body:{avatar:t}})}addCard(e){let{name:t,url:r}=e;return this.apiCall({endpoint:"/cards",method:"POST",body:{name:t,link:r}})}deleteCard(e){let{cardId:t}=e;return this.apiCall({endpoint:`/cards/${t}`,method:"DELETE"})}like(e){let{cardId:t}=e;return this.apiCall({endpoint:`/cards/${t}/likes`,method:"PUT"})}unlike(e){let{cardId:t}=e;return this.apiCall({endpoint:`/cards/${t}/likes`,method:"DELETE"})}deleteAllCards(){this.getInitialCards().then((e=>{const t=e.map((e=>this.deleteCard({cardId:e._id})));return Promise.all(t)})).then((()=>{console.log("All cards have been deleted!")}))}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",authToken:"7fef8830-65a5-4840-8327-1cd6adab3c4d"}),l={};var d;d={formSelector:".form",inputSelector:".form__input",submitButtonSelector:".form__submit",errorInputPrefixSelector:".form__input-error_",inactiveButtonClass:"form__submit_inactive",inputErrorClass:"form__input_type_error",errorClass:"form__input-error_active"},Array.from(document.forms).forEach((e=>{const t=e.getAttribute("name"),r=new n(d,e);l[t]=r,r.enableValidation()}));const u=new i({popupSelector:".popup--delete-card"},(()=>(u.updateFormSubmit("Deleting..."),u.getFormValidator(l).disableSubmitButton(),a.deleteCard({cardId:o.getCard().id}).then((()=>(o.delete(),Promise.resolve()))).then((()=>{u.getFormValidator(l).disableSubmitButton(),u.close()})).catch((e=>{u.updateFormSubmit("Error - Try Again"),u.getFormValidator(l).disableSubmitButton(!1),console.error(`Error: ${e}`)})))));function c(t){const r=new e(t,".card",{handleImageClick:()=>{b.open({name:t.name,url:t.link})},deleteCallback:()=>{o=r,u.updateFormSubmit("Delete"),u.open(),u.getFormValidator(l).disableSubmitButton(!1)},likeCallback:()=>r.isLiked?a.unlike({cardId:r.getCard().id}):a.like({cardId:r.getCard().id})});return r.updateLike(),r.getCard().element}u.setEventListeners(),a.getUser().then((e=>{t.setUserInfo({name:e.name,job:e.about,id:e._id,pfpURL:e.avatar})})).catch((e=>{t.setUserInfo({name:"Error: Not Found",job:"Error: Not Found"}),console.error(`Error: ${e}`)}));let p=null;a.getCards().then((e=>{p=new s({items:e,renderer:e=>p.addItem(c(e),"append")},".gallery"),p.clear(),p.renderItems()})).catch((e=>console.error(`Error: ${e}`)));const m=document.querySelector(".profile__edit-name-button"),h=new i({popupSelector:".popup--edit-profile"},(e=>{h.updateFormSubmit("Saving..."),h.getFormValidator(l).disableSubmitButton(),a.updateProfile({name:e.name,about:e.job}).then((e=>{t.setUserInfo({name:e.name,job:e.about}),h.close()})).catch((e=>{h.updateFormSubmit("Error - Try Again"),h.getFormValidator(l).disableSubmitButton(!1),console.error(`Error: ${e}`)}))}));h.setEventListeners(),m.addEventListener("click",(()=>{h.setInputValues({name:t.getUserInfo().name,job:t.getUserInfo().job}),h.updateFormSubmit("Save"),h.getFormValidator(l).disableSubmitButton(),h.open()}));const _=document.querySelector(".profile__add-button"),E=new i({popupSelector:".popup--new-place"},(e=>{E.updateFormSubmit("Creating..."),E.getFormValidator(l).disableSubmitButton(),a.addCard({name:e["place-name"],url:e["place-url"]}).then((e=>(p.addItem(c(e)),Promise.resolve()))).then((()=>{E.getFormValidator(l).reset(),E.close()})).catch((e=>{E.updateFormSubmit("Error - Try Again"),E.getFormValidator(l).disableSubmitButton(!1),console.error(`Error: ${e}`)}))}));_.addEventListener("click",(()=>{E.updateFormSubmit("Create"),E.open()})),E.setEventListeners();const b=new class extends r{constructor(e){let{popupSelector:t}=e;super({popupSelector:t}),this._image=this._popup.querySelector(".popup__image"),this._imageCaption=this._popup.querySelector(".popup__place-name")}open(e){let{name:t,url:r}=e;this._imageCaption.textContent=t,this._image.alt=t,this._image.src=r,super.open()}}({popupSelector:".popup--open-image"});b.setEventListeners();const g=document.querySelector(".profile__avatar-container"),f=(document.querySelector(".profile__avatar"),new i({popupSelector:".popup--change-pfp"},(e=>{f.updateFormSubmit("Updating..."),f.getFormValidator(l).disableSubmitButton(),a.updateProfilePicture({url:e["pfp-url"]}).then((e=>{t.setUserInfo({pfpURL:e.avatar}),f.getFormValidator(l).reset(),f.close()})).catch((e=>{console.error(`Error: ${e}`),f.getFormValidator(l).disableSubmitButton(!1),f.updateFormSubmit("Error - Try Again")}))})));f.setEventListeners(),g.addEventListener("click",(()=>{f.open(),f.updateFormSubmit("Update")}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,